package command

import (
	"os"
	"path"
	"strings"
	"text/template"

	"github.com/sirupsen/logrus"

	"github.com/spf13/cobra"
)

const newTemplate = `#!{{.Shebang}}
{{if .Set}}set {{.Set}}
{{end}}{{if .SourceGoEnv}}source <(go env)
{{end}}{{if .CDFileDir}}cd "$(dirname $0)"
{{end}}
render_file() {
	echo "// Code generated by './{{.FileName}}.sh'. DO NOT EDIT."
	echo "package {{.Package}}"
	# TODO: generate code
}

render_file | goimports > "{{.FileName}}.go"
`

type newTemplateData struct {
	Shebang     string
	Set         string
	SourceGoEnv bool
	CDFileDir   bool
	FileName    string
	Package     string
}

func newNew() *cobra.Command {
	shebang := "/bin/bash"
	packageName := ""
	set := "-eu"
	sourceGoEnv := false
	cdFileDir := false

	cmd := &cobra.Command{
		Use:  "new",
		Args: cobra.ExactArgs(1),
		Example: `  # Generate test.sh with options
  gogtok new -sc --set '-euC' test.sh`,
		RunE: func(cmd *cobra.Command, args []string) error {
			filePath := args[0]
			if strings.HasSuffix(filePath, ".sh") {
				filePath = filePath[:len(filePath)-3]
			}

			if packageName == "" {
				pn, err := getPackageName(path.Dir(filePath))
				if err != nil {
					logrus.WithError(err).Warn("Failed to get package name from other .go files. Directory name will be used.")

					dir, err := os.Getwd()
					if err != nil {
						return err
					}

					pn = path.Base(dir)
				}
				packageName = pn
			}

			tmpl, err := template.New("").Parse(newTemplate)
			if err != nil {
				return err
			}

			fileName := path.Base(filePath)

			f, err := os.OpenFile(filePath+".sh", os.O_WRONLY|os.O_CREATE, 0755)
			if err != nil {
				return err
			}
			defer f.Close()

			if err := tmpl.Execute(f, &newTemplateData{
				Shebang:     shebang,
				Set:         set,
				SourceGoEnv: sourceGoEnv,
				CDFileDir:   cdFileDir,
				FileName:    fileName,
				Package:     packageName,
			}); err != nil {
				return err
			}

			logrus.Infof("Add '//go:generate ./%s.sh' into your go file", fileName)

			return nil
		},
	}

	flags := cmd.Flags()
	flags.StringVar(&packageName, "package", packageName, "Name of package")
	flags.StringVar(&shebang, "shebang", shebang, "Shebang")
	flags.BoolVarP(&sourceGoEnv, "source-go-env", "s", sourceGoEnv, "Source 'go env'")
	flags.BoolVarP(&cdFileDir, "cd-file-dir", "c", cdFileDir, "'cd FILE_DIR'")
	flags.StringVar(&set, "set", set, "set")

	return cmd
}
