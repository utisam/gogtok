package command

import (
	"os"
	"path"
	"text/template"

	"github.com/spf13/cobra"
)

const newTemplate = `#!{{.Shebang}}
{{if .Set}}set {{.Set}}
{{end}}{{if .SourceGoEnv}}source <(go env)
{{end}}{{if .CDFileDir}}cd "$(dirname $0)"
{{end}}
render_file() {
	echo "// Code generated by './{{.Filename}}.sh'. DO NOT EDIT."
	echo "package {{.Package}}"
	# TODO: generate code
}

render_file | goimports > "{{.Filename}}.go"
`

type NewTemplateData struct {
	Shebang     string
	Set         string
	SourceGoEnv bool
	CDFileDir   bool
	Filename    string
	Package     string
}

func newNew() *cobra.Command {
	shebang := "#!/bin/bash"
	dir, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	packageName := path.Base(dir)

	cmd := &cobra.Command{
		Use:  "new",
		Args: cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			filename := args[0]

			tmpl, err := template.New("").Parse(newTemplate)
			if err != nil {
				return err
			}

			tmpl.Execute(os.Stdout, &NewTemplateData{
				Shebang:     shebang,
				Set:         "-eu",
				SourceGoEnv: false,
				CDFileDir:   false,
				Filename:    filename,
				Package:     packageName,
			})

			return nil
		},
	}

	flags := cmd.Flags()
	flags.StringVar(&packageName, "package", packageName, "Name of package")

	return cmd
}
