package command

import (
	"os"
	"path"
	"strings"
	"text/template"

	"github.com/sirupsen/logrus"

	"github.com/spf13/cobra"
)

const newTemplate = `#!{{.Shebang}}
{{if .Set}}set {{.Set}}
{{end}}{{if .SourceGoEnv}}source <(go env)
{{end}}{{if .CDFileDir}}cd "$(dirname $0)"
{{end}}
render_file() {
	echo "// Code generated by './{{.FileName}}.sh'. DO NOT EDIT."
	echo "package {{.Package}}"
	# TODO: generate code
}

render_file | goimports > "{{.FileName}}.go"
`

type newTemplateData struct {
	Shebang     string
	Set         string
	SourceGoEnv bool
	CDFileDir   bool
	FileName    string
	Package     string
}

func newNew() *cobra.Command {
	shebang := "#!/bin/bash"
	packageName := ""

	cmd := &cobra.Command{
		Use:  "new",
		Args: cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			filePath := args[0]
			if strings.HasSuffix(filePath, ".sh") {
				filePath = filePath[:len(filePath)-3]
			}

			pn, err := getPackageName(path.Dir(filePath))
			if err != nil {
				logrus.WithError(err).Warn("Failed to get package name from other .go files. Directory name will be used.")

				dir, err := os.Getwd()
				if err != nil {
					return err
				}

				pn = path.Base(dir)
			}
			packageName = pn

			tmpl, err := template.New("").Parse(newTemplate)
			if err != nil {
				return err
			}

			fileName := path.Base(filePath)

			f, err := os.OpenFile(filePath+".sh", os.O_CREATE, 0755)
			if err != nil {
				return err
			}
			defer f.Close()

			tmpl.Execute(f, &newTemplateData{
				Shebang:     shebang,
				Set:         "-eu",
				SourceGoEnv: false,
				CDFileDir:   false,
				FileName:    fileName,
				Package:     packageName,
			})

			logrus.Infof("Add '//go:generate ./%s.sh' into your go file", fileName)

			return nil
		},
	}

	flags := cmd.Flags()
	flags.StringVar(&packageName, "package", packageName, "Name of package")

	return cmd
}
